#!/bin/bash -e

set -eu

echo '# Bootstrapping an OCaml dev environment'

# Sensible defaults:
: ${OPAM_VERSION:="1.2.2"}
: ${OCAML_VERSION:="4.02.3"}
: ${OBJ:=`git rev-parse --show-toplevel`/v1/opam/_obj}

while [[ $# > 0 ]]; do
  key="$1"

  case $key in
    --opam)
    OPAM_VERSION="$2"
    shift # past argument
    ;;
    --ocaml)
    OCAML_VERSION="$2"
    shift # past argument
    ;;
    --obj)
    OBJ="$2"
    shift # past argument
    ;;
    *)
    echo "Usage: $0 [--opam=$OPAM_VERSION] [--ocaml=$OCAML_VERSION] [--obj=$OBJ]"
    echo ""
    echo "Construct an OCaml build environment from scratch with the given version"
    echo "of OPAM, the given OCaml version and place it in the given obj directory."
    exit 0
    ;;
  esac
  shift
done

mkdir -p ${OBJ}
PATH=${OBJ}/bin:$PATH
AVAILABLE_OPAM_VERSION=`opam --version 2>/dev/null || true`
AVAILABLE_OCAML_VERSION="ignoring homebrew version built for El Capitan"

FILE=opam-full-${OPAM_VERSION}.tar.gz
URL=https://github.com/ocaml/opam/releases/download/${OPAM_VERSION}/${FILE}

if [ "$OPAM_VERSION" = "$AVAILABLE_OPAM_VERSION" ]; then
  echo "# OPAM $OPAM_VERSION is already available."
else
  echo "# OPAM $OPAM_VERSION will be installed locally."
  cd ${OBJ}
  if [ ! -e ${FILE} ]; then
    curl -OL ${URL}
  fi
  tar -zxf ${FILE}
  cd opam-full-${OPAM_VERSION}
  if [ "" != "$AVAILABLE_OCAML_VERSION" ]; then
    # TODO: check whether available OCaml is new enough
    echo "# OCaml $AVAILABLE_OCAML_VERSION is available to compile OPAM."
    ./configure --prefix=${OBJ}
    make lib-ext
    make
  else
    echo "# OCaml is not available, performing a local installation"
    make cold CONFIGURE_ARGS="--prefix=${OBJ}"
  fi
  make install
  cd ${OBJ}/..
fi

export OPAMYES=1
export OPAMJOBS=2
export OPAM_REPO=$(git rev-parse --show-toplevel)/v1/opam/repo

echo OPAMROOT=${OPAMROOT}

# We nolonger cache the opam directory so the corruption seen in
# https://github.com/docker/pinata/issues/659
# shouldn't happen any more
if opam list --root "${OPAMROOT}" >/dev/null 2>/dev/null; then
  case $(opam repo -s | wc -l | awk '{ print $1 }') in
    0) opam repo add default ${OPAM_REPO};;
    1) ;;
    *) for name in $(opam repo -s); do
         opam repo remove ${name}
       done
       opam repo add default ${OPAM_REPO}
       ;;
  esac;
  if [ "$OCAML_VERSION" != "$AVAILABLE_OCAML_VERSION" ]; then
    opam switch --root=${OPAMROOT} $OCAML_VERSION &> /dev/null
  fi
else
  if [ "$OCAML_VERSION" = "$AVAILABLE_OCAML_VERSION" ]; then
    opam init -a --root=${OPAMROOT} ${OPAM_REPO} &> /dev/null
  else
    opam init -a --root=${OPAMROOT} --comp=${OCAML_VERSION} ${OPAM_REPO} &> /dev/null
  fi
fi

# re-evaluate opam/ocaml version after init
AVAILABLE_OPAM_VERSION=$(opam --version 2>/dev/null || true)
AVAILABLE_OCAML_VERSION=$(ocamlc -version 2>/dev/null || true)

echo "# The build environment in $OPAMROOT now has:"
echo "# OPAM version $AVAILABLE_OPAM_VERSION"
echo "# OCaml verion $AVAILABLE_OCAML_VERSION"

# opam config env
